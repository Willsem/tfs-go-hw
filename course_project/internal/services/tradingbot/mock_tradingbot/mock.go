// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_tradingbot is a generated GoMock package.
package mock_tradingbot

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/willsem/tfs-go-hw/course_project/internal/domain"
	dto "github.com/willsem/tfs-go-hw/course_project/internal/dto"
)

// MockTelegramBot is a mock of TelegramBot interface.
type MockTelegramBot struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramBotMockRecorder
}

// MockTelegramBotMockRecorder is the mock recorder for MockTelegramBot.
type MockTelegramBotMockRecorder struct {
	mock *MockTelegramBot
}

// NewMockTelegramBot creates a new mock instance.
func NewMockTelegramBot(ctrl *gomock.Controller) *MockTelegramBot {
	mock := &MockTelegramBot{ctrl: ctrl}
	mock.recorder = &MockTelegramBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramBot) EXPECT() *MockTelegramBotMockRecorder {
	return m.recorder
}

// SendSubscribedMessage mocks base method.
func (m *MockTelegramBot) SendSubscribedMessage(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendSubscribedMessage", message)
}

// SendSubscribedMessage indicates an expected call of SendSubscribedMessage.
func (mr *MockTelegramBotMockRecorder) SendSubscribedMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSubscribedMessage", reflect.TypeOf((*MockTelegramBot)(nil).SendSubscribedMessage), message)
}

// MockApplicationsRepository is a mock of ApplicationsRepository interface.
type MockApplicationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationsRepositoryMockRecorder
}

// MockApplicationsRepositoryMockRecorder is the mock recorder for MockApplicationsRepository.
type MockApplicationsRepositoryMockRecorder struct {
	mock *MockApplicationsRepository
}

// NewMockApplicationsRepository creates a new mock instance.
func NewMockApplicationsRepository(ctrl *gomock.Controller) *MockApplicationsRepository {
	mock := &MockApplicationsRepository{ctrl: ctrl}
	mock.recorder = &MockApplicationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationsRepository) EXPECT() *MockApplicationsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockApplicationsRepository) Add(application domain.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", application)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockApplicationsRepositoryMockRecorder) Add(application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockApplicationsRepository)(nil).Add), application)
}

// GetAll mocks base method.
func (m *MockApplicationsRepository) GetAll() ([]domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockApplicationsRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockApplicationsRepository)(nil).GetAll))
}

// GetByTicker mocks base method.
func (m *MockApplicationsRepository) GetByTicker(ticker string) ([]domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTicker", ticker)
	ret0, _ := ret[0].([]domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTicker indicates an expected call of GetByTicker.
func (mr *MockApplicationsRepositoryMockRecorder) GetByTicker(ticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTicker", reflect.TypeOf((*MockApplicationsRepository)(nil).GetByTicker), ticker)
}

// MockIndicatorService is a mock of IndicatorService interface.
type MockIndicatorService struct {
	ctrl     *gomock.Controller
	recorder *MockIndicatorServiceMockRecorder
}

// MockIndicatorServiceMockRecorder is the mock recorder for MockIndicatorService.
type MockIndicatorServiceMockRecorder struct {
	mock *MockIndicatorService
}

// NewMockIndicatorService creates a new mock instance.
func NewMockIndicatorService(ctrl *gomock.Controller) *MockIndicatorService {
	mock := &MockIndicatorService{ctrl: ctrl}
	mock.recorder = &MockIndicatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndicatorService) EXPECT() *MockIndicatorServiceMockRecorder {
	return m.recorder
}

// MakeDecision mocks base method.
func (m *MockIndicatorService) MakeDecision(ticker domain.TickerInfo) domain.Decision {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDecision", ticker)
	ret0, _ := ret[0].(domain.Decision)
	return ret0
}

// MakeDecision indicates an expected call of MakeDecision.
func (mr *MockIndicatorServiceMockRecorder) MakeDecision(ticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDecision", reflect.TypeOf((*MockIndicatorService)(nil).MakeDecision), ticker)
}

// MockSubscribeService is a mock of SubscribeService interface.
type MockSubscribeService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribeServiceMockRecorder
}

// MockSubscribeServiceMockRecorder is the mock recorder for MockSubscribeService.
type MockSubscribeServiceMockRecorder struct {
	mock *MockSubscribeService
}

// NewMockSubscribeService creates a new mock instance.
func NewMockSubscribeService(ctrl *gomock.Controller) *MockSubscribeService {
	mock := &MockSubscribeService{ctrl: ctrl}
	mock.recorder = &MockSubscribeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribeService) EXPECT() *MockSubscribeServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSubscribeService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSubscribeServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubscribeService)(nil).Close))
}

// GetChan mocks base method.
func (m *MockSubscribeService) GetChan() <-chan domain.TickerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChan")
	ret0, _ := ret[0].(<-chan domain.TickerInfo)
	return ret0
}

// GetChan indicates an expected call of GetChan.
func (mr *MockSubscribeServiceMockRecorder) GetChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChan", reflect.TypeOf((*MockSubscribeService)(nil).GetChan))
}

// Subscribe mocks base method.
func (m *MockSubscribeService) Subscribe(ticker string, candle domain.CandleType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ticker, candle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscribeServiceMockRecorder) Subscribe(ticker, candle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscribeService)(nil).Subscribe), ticker, candle)
}

// Unsubscribe mocks base method.
func (m *MockSubscribeService) Unsubscribe(ticker string, candle domain.CandleType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ticker, candle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscribeServiceMockRecorder) Unsubscribe(ticker, candle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscribeService)(nil).Unsubscribe), ticker, candle)
}

// MockTradingService is a mock of TradingService interface.
type MockTradingService struct {
	ctrl     *gomock.Controller
	recorder *MockTradingServiceMockRecorder
}

// MockTradingServiceMockRecorder is the mock recorder for MockTradingService.
type MockTradingServiceMockRecorder struct {
	mock *MockTradingService
}

// NewMockTradingService creates a new mock instance.
func NewMockTradingService(ctrl *gomock.Controller) *MockTradingService {
	mock := &MockTradingService{ctrl: ctrl}
	mock.recorder = &MockTradingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradingService) EXPECT() *MockTradingServiceMockRecorder {
	return m.recorder
}

// OpenPositions mocks base method.
func (m *MockTradingService) OpenPositions() ([]dto.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenPositions")
	ret0, _ := ret[0].([]dto.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenPositions indicates an expected call of OpenPositions.
func (mr *MockTradingServiceMockRecorder) OpenPositions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPositions", reflect.TypeOf((*MockTradingService)(nil).OpenPositions))
}

// SendOrder mocks base method.
func (m *MockTradingService) SendOrder(order dto.Order) (domain.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrder", order)
	ret0, _ := ret[0].(domain.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOrder indicates an expected call of SendOrder.
func (mr *MockTradingServiceMockRecorder) SendOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrder", reflect.TypeOf((*MockTradingService)(nil).SendOrder), order)
}
